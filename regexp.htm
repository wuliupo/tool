<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>RegExp</title>
<style type="text/css">
 .container{max-width:1000px;margin:20px auto;font-size:12px;font-family:"微软雅黑","宋体","黑体",Arial;}
 .table1{width:100%;border-collapse:collapse;}
 .table1,.table1 th,.table1 td{padding:4px 8px;border:1px solid #CCC;}
 h2{margin:10px 0;padding:4px 10px;background-color:#009a61;color:white;font-size:14px;height:25px;line-height:25px;}
 h3{font-size:12px;font-weight:bold;}
 pre{margin:5px 0;padding:5px 10px;background-color:#f5f5f5;border:1px solid #ccc;word-wrap:break-word;white-space:pre-wrap;}
</style>
</head>
<body>
<div class="container">
<h1>JavaScript正则表达式</h1>
<p>网上正则表达式的教程够多了，但由于javascript的历史比较悠久，也比较古老，因此有许多特性是不支持的。我们先从最简单地说起，文章所演示的正则基本都是perl方式。<a href="http://www.cnblogs.com/rubylouvre/archive/2010/03/09/1681222.html" target="_blank">@cnblogs</a></p>

<h2>元字符</h2>
<p>(  [  {  \ ^  $  |  )  ?  *  +  .</p>
<h2>预定义的特殊字符</h2>
<table class="table1">
  <col width="33%"></col> <col width="33%"></col> <col width="33%"></col>
  <thead>
    <tr>
      <th>字符</th><th>正则</th><th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\t</td><td>/\t/</td><td>制表符</td>
    </tr>
    <tr>
      <td>\n</td><td>/\n/</td><td>制表符</td>
    </tr>
    <tr>
      <td>\r</td><td>/\r/</td><td>回车符</td>
    </tr>
    <tr>
      <td>\f</td><td>/\f/</td><td>换页符</td>
    </tr>
    <tr>
      <td>\a</td><td>/\a/</td><td>alert字符</td>
    </tr>
    <tr>
      <td>\e</td><td>/\e/</td><td>escape字符</td>
    </tr>
    <tr>
      <td>\cX</td><td>/\cX/</td><td>与X相对应的控制字符</td>
    </tr>
    <tr>
      <td>\b</td><td>/\b/</td><td>与回退字符</td>
    </tr>
    <tr>
      <td>\v</td><td>/\v/</td><td>垂直制表符</td>
    </tr>
    <tr>
      <td>\0</td><td>/\0/</td><td>空字符</td>
    </tr>
  </tbody>
</table>

<h2>字符类</h2>

<h3>简单类</h3>
<p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[]这个整体对应一个字符。如</p>
<pre>
alert(/ruby/.test("ruby"));  //true
alert(/[abc]/.test("a"));    //true
alert(/[abc]/.test("b"));    //true
alert(/[abc]/.test("c"));    //true
alert("a bat ,a Cat,a fAt bat ,a faT cat".match(/[bcf]at/gi));    //bat,Cat,fAt,bat,faT,cat
</pre>

<h3>负向类</h3>
<p>也是在那个括号里做文章，前面加个元字符进行取反，表示匹配不能为括号里面的字符。</p>
<pre>
alert(/[^abc]/.test("a"));    //false
alert(/[^abc]/.test("b"));    //false
alert(/[^abc]/.test("6"));    //true
alert(/[^abc]/.test("gg"));   //true
</pre>

<h3>范围类</h3>
<p>还是在那个中括号里面做文章。有时匹配的东西过多，而且类型又相同，全部输入太麻烦，我们可以用它。特征就是在中间加了个横线。</p>

<h3>组合类</h3>
<p>还是在那个中括号里面做文章。允许用中括号匹配不同类型的单个字符。</p>
<pre>
alert(/[a-f]/.test("b"));    //true
alert(/[a-f]/.test("k"));    //false
alert(/[a-z]/.test("h"));    //true
alert(/[A-Z]/.test("gg"));   //false
alert(/[^H-Y]/.test("G"));   //true
alert(/[0-9]/.test("8"));    //true
alert(/[^7-9]/.test("6"));   //true

alert(/[a-m1-5\n]/.test("a"));    //true
alert(/[a-m1-5\n]/.test("3"));    //true
var a = "\n\
      "
alert(/[a-m1-5\n]/.test(a));      //true
alert(/[a-m1-5\n]/.test("r"));    //false
</pre>

<h3>预定义类</h3>
<p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>
<table class="table1">
  <thead>
    <tr>
      <th width="33%">字符</th><th width="33%">等同于</th><th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>.</td><td>[^\n\r]</td><td>除了换行和回车之外的任意字符</td>
    </tr>
    <tr>
      <td>\d</td><td>[0-9]</td><td>数字字符</td>
    </tr>
    <tr>
      <td>\D</td><td>[^0-9]</td><td>非数字字符</td>
    </tr>
    <tr>
      <td>\s</td><td>[ \t\n\x0B\f\r]</td><td>空白字符</td>
    </tr>
    <tr>
      <td>\S</td><td>[^ \t\n\x0B\f\r]</td><td>非空白字符</td>
    </tr>
    <tr>
      <td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符(所有的字母)</td>
    </tr>
    <tr>
      <td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td>
    </tr>
  </tbody>
</table>
<pre>
alert(/\d/.test("3"));    //true
alert(/\d/.test("w"));    //false
alert(/\D/.test("w"));    //true
alert(/\w/.test("w"));    //true
alert(/\w/.test("司"));   //false
alert(/\W/.test("徒"));   //true
alert(/\s/.test(" "));    //true
alert(/\S/.test(" "));    //false
alert(/\S/.test("正"));   //true
alert(/./.test("美"));    //true
alert(/./.test("  "));    //true
var a = "\n\
      "
alert(/./.test(a));      //true
</pre>

<h2>量词</h2>
<p>由于元字符与特殊字符或字符类或者它们的组合（中括号）甚至它们的马甲（预定义类）都是一对一进行匹配。我们要匹配“司徒正美这个词”，最简单都要/..../，如果长到50多个字符岂不是要死人。因此我们逼切需要一个简单的操作，来处理这数量关系。</p>

<h3>简单量词</h3>
<table class="table1">
  <thead>
    <tr>
      <th width="33%">代码</th><th width="33%">类型</th><th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>?</td><td>软性量词</td><td>出现零次或一次</td>
    </tr>
    <tr>
      <td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td>
    </tr>
    <tr>
      <td>+</td><td>软性量词</td><td>出现一次或多次（至道一次）</td>
    </tr>
    <tr>
      <td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td>
    </tr>
    <tr>
      <td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td>
    </tr>
    <tr>
      <td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td>
    </tr>
  </tbody>
</table>
<pre>
alert(/..../.test("司徒正美"));      //true
alert(/司徒正美/.test("司徒正美"));    //true
alert(/[\u4e00-\u9fa5]{4}/.test("司徒正美"));      //true
alert(/[\u4e00-\u9fa5]{4}/.test("司徒正美55"));    //true
alert(/^[\u4e00-\u9fa5]+$/.test("正则表达式"));    //true
alert(/^[\u4e00-\u9fa5]+$/.test("正则表达式&*@@"));    //false
alert(/\d{6}/.test("123456"));    //true
alert(/[ruby]{2}/.test("rr"));    //true
alert(/[ruby]{2}/.test("ru"));    //true
alert(/[ruby]{2}/.test("ry"));    //true
</pre>
<p class="note">/[\u4e00-\u9fa5]/用于匹配单个汉字。</p>

<h3>贪婪量词，惰性量词与支配性量词</h3>
<p>贪婪量词，上面提到的所有简单量词。就像成语中说的巴蛇吞象那样，一口吞下整个字符串，发现吞不下（匹配不了），再从后面一点点吐出来（去掉最后一个字符，再看这时这个整个字符串是否匹配，不断这样重复直到长度为零）</p>
<p>隋性量词，在简单量词后加问号。由于太懒了，先吃了前面第一个字符，如果不饱再捏起多添加一个（发现不匹配，就读下第二个，与最初的组成一个有两个字符串的字符串再尝试匹配，如果再不匹配，再吃一个组成拥有三个字符的字符串……）。其工作方式与贪婪量词相反。</p>
<p>支配性量词，在简单量词后加加号。上面两种都有个不断尝试的过程，而支配性量词却只尝试一次，不合口味就算了。就像一个出身高贵居支配地位的公主。但你也可以说它是最懒量词。由于javascript不支持，所以它连出场的机会也没有了。</p>
<pre>
var re1 = /.*bbb/g;     //贪婪
var re2 = /.*?bbb/g;    //惰性
//  var re3 = /.*+bbb/g;    //支配性,javascript不支持，IE与所有最新的标准浏览器都报错
alert(re1.test("abbbaabbbaaabbbb1234")+"");    //true
alert(re1.exec("abbbaabbbaaabbbb1234")+"");    //null
alert("abbbaabbbaaabbbb1234".match(re1)+"");    //abbbaabbbaaabbbb

alert(re2.test("abbbaabbbaaabbbb1234")+"");    //true
alert(re2.exec("abbbaabbbaaabbbb1234")+"");    //aabbb
alert("abbbaabbbaaabbbb1234".match(re2)+"");   //abbb,aabbb,aaabbb
</pre>

<h2>分组</h2>
<p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，中括号表示范围内选择，大括号表示重复次数。小括号允许我们重复多个字符。</p>
<pre>
//分组+量词
alert(/(dog){2}/.test("dogdog"));    //true
//分组+范围
alert("baddad".match(/([bd]ad?)*/));    //baddad,dad
//分组+分组
alert("mon and dad".match(/(mon( and dad)?)/));    //mon and dad,mon and dad, and dad
</pre>

<h2>反向引用</h2>
<p>反向引用标识由正则表达式中的匹配组捕获的子字符串。每个反向引用都由一个编号或名称来标识，并通过“\编号”表示法进行引用。</p>
<pre>
var color = "#990000";
/#(\d+)/.test(color);
alert(RegExp.$1);    //990000

alert(/(dog)\1/.test("dogdog"));    //true

var num = "1234 5678";
var newNum = num.replace(/(\d{4}) (\d{4})/,"$2 $1");
alert(newNum);
</pre>

<h2>候选</h2>
<p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>
<pre>
var reg = /(red|black|yellow)!!/;
alert(reg.test("red!!"));       //true
alert(reg.test("black!!"));     //true
alert(reg.test("yellow!!"));    //true
</pre>

<h2>非捕获性分组</h2>
<p>并不是所有分组都能创建反向引用，有一种特别的分组称之为非捕获性分组，它是不会创建反向引用。反之，就是捕获性分组。要创建一个非捕获性分组，只要在分组的左括号的后面紧跟一个问号与冒号就行了。</p>
<pre>
var color = "#990000";
/#(?:\d+)/.test(color);
alert(RegExp.$1);    //""
</pre>
<p>题目，移除所有标签，只留下innerText!</p>
<pre>
var html = "&lt;p&gt;&lt;a href='http://www.cnblogs.com/rubylouvre/'&gt;Ruby Louvre&lt;/a&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;";
var text = html.replace(/&lt;(?:.|\s)*?&gt;/g, "");
alert(text);
</pre>
<p calss="red">注意：javascript不存在命名分组</p>

<h3>前瞻</h3>
<p>继续在分组内做文章。前瞻与后瞻其实都属于零宽断言，但javascript不支持后瞻。</p>
<table class="table1">
  <thead>
    <tr>
      <th colspan="3">零宽断言</th>
    </tr>
    <tr>
      <th width="33%">正则</th><th width="33%">名称</th><th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>(?=exp)</td><td>正向前瞻</td><td>匹配exp前面的位置</td>
    </tr>
    <tr>
      <td>(?!exp)</td><td>负向前瞻</td><td>匹配后面不是exp的位置</td>
    </tr>
    <tr>
      <td>(?&lt;=exp)</td><td>正向后瞻</td><td>匹配exp后面的位置<span class="red">不支持</span></td>
    </tr>
    <tr>
      <td>(?&lt;!exp)</td><td>负向后瞻</td><td>匹配前面不是exp的位置<span class="red">不支持</span></td>
    </tr>
  </tbody>
</table>
<p>正向前瞻用来检查接下来的出现的是不是某个特定的字符集。而负向前瞻则是检查接下来的不应该出现的特定字符串集。零宽断言是不会被捕获的。</p>
<pre>
var str1 = "bedroom";
var str2 = "bedding";
var reBed = /(bed(?=room))///在我们捕获bed这个字符串时，抢先去看接下来的字符串是不是room
alert(reBed.test(str1));    //true
alert(RegExp.$1);           //bed
alert(RegExp.$2 === "");    //true
alert(reBed.test(str2));    //false

var str1 = "bedroom";
var str2 = "bedding";
var reBed = /(bed(?!room))/;   //要来它后面不能是room
alert(reBed.test(str1));       //false
alert(reBed.test(str2));       //true
</pre>
<p>题目，移除hr以外的所有标签，只留下innerText!</p>
<pre>
var html = "&lt;p&gt;&lt;a href='http://www.cnblogs.com/rubylouvre/'&gt;Ruby Louvre&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;";
var text = html.replace(/&lt;(?!hr)(?:.|\s)*?&gt;/ig,"")
alert(text)//Ruby Louvre&lt;hr/&gt;by 司徒正美
</pre>

<h3>边界</h3>
<p>一个要与字符类合用的东西。</p>
<table class="table1">
  <thead>
    <tr>
      <th colspan="3">边界</th>
    </tr>
    <tr>
      <th width="33%">正则</th><th width="33%">名称</th><th width="33%">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>^</td><td>开头</td><td><span>注意不能紧跟于左中括号的后面</span></td>
    </tr>
    <tr>
      <td>$</td><td>结尾</td><td></td>
    </tr>
    <tr>
      <td>\b</td><td>单词边界</td><td>指[a-zA-Z_0-9]之外的字符</td>
    </tr>
    <tr>
      <td>\B</td><td>非单词边界</td><td></td>
    </tr>
  </tbody>
</table>
<p>题目，设计一个字符串原型方法，实现首字母大写！</p>
<pre>
var a = "ruby";
String.prototype.capitalize =  function () {
    return this.replace(/^\w/, function (s) {
        return s.toUpperCase();
    });
}
alert(a.capitalize());    //Ruby
</pre>
<p>单词边界举例。要匹配的东西的前端或未端不能为英文字母阿拉伯字数字或下横线。</p>
<pre>
var str = "12w-eefd&efrew";
alert(str.match(/\b\w+\b/g));    //12w,eefd,efrew
</pre>
<table class="table1" >
 <col ></col> <col align="left"></col>
  <thead>
    <tr>
      <th width="15%">实例属性</th><th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>global</td>
      <td>是当前表达式模式首次匹配内容的开始位置，从0开始计数。其初始值为-1，每次成功匹配时，index属性都会随之改变。</td>
    </tr>
    <tr>
      <td>ignoreCase</td>
      <td>返回创建RegExp对象实例时指定的ignoreCase标志（i）的状态。如果创建RegExp对象实例时设置了i标志，该属性返回True，否则返回False，默认值为False。</td>
    </tr>
    <tr>
      <td>lastIndex</td>
      <td>是当前表达式模式首次匹配内容中最后一个字符的下一个位置，从0开始计数，常被作为继续搜索时的起始位置，初始值为-1，
        表示从起始位置开始搜索，每次成功匹配时，lastIndex属性值都会随之改变。(只有使用exec()或test()方法才会填入，否则为0)</td>
    </tr>
    <tr>
      <td>multiLine</td>
      <td>返回创建RegExp对象实例时指定的multiLine标志（m）的状态。如果创建RegExp对象实例时设置了m标志，该属性返回True，否则返回False，默认值为False。</td>
    </tr>
    <tr>
      <td>source</td>
      <td>返回创建RegExp对象实例时指定的表达式文本字符串。</td>
    </tr>
  </tbody>
</table>
<pre>
var str = "JS's Louvre";
var reg = /\w/g;
alert(reg.exec(str));    //J
alert(reg.lastIndex);    //1
alert(reg.exec(str));    //S
alert(reg.lastIndex);    //2
alert(reg.exec(str));    //s
alert(reg.lastIndex);    //4
alert(reg.exec(str));    //L
alert(reg.lastIndex);    //6
</pre>
</div>
<script src="https://hm.baidu.com/hm.js?f1d0cf2c0b66b9dc70ded52b9629fa85" async></script>
</body>
</html>
